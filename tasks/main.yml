---
- name: create system group
  group:
    name: "{{ alertmanager_system_group }}"
    system: true
    state: present
  become: true
  tags: alertmanager

- name: create system user
  user:
    name: "{{ alertmanager_system_user }}"
    system: true
    shell: "/usr/sbin/nologin"
    group: "{{ alertmanager_system_group }}"
    createhome: false
  become: true
  tags: alertmanager

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ alertmanager_system_user }}"
    group: "{{ alertmanager_system_group }}"
    mode: 0755
  with_items:
    - "{{ alertmanager_config_dir }}"
    - "{{ alertmanager_config_dir }}/templates"
    - "{{ alertmanager_db_dir }}"
  become: true
  tags: alertmanager

- name: check if is installed
  stat:
    path: "{{ alertmanager_binary_install_dir }}/alertmanager"
  register: __alertmanager_is_installed
  become: true
  tags: alertmanager

- name: gather currently installed version (if any)
  command: "{{ alertmanager_binary_install_dir }}/alertmanager --version"
  args:
    warn: false
  changed_when: false
  register: __alertmanager_current_version_output
  when: __alertmanager_is_installed.stat.exists
  become: true
  tags: alertmanager

- name: get latest release
  uri:
    url: "https://api.github.com/repos/prometheus/alertmanager/releases/latest"
    method: GET
    return_content: true
    status_code: "200"
    body_format: json
    validate_certs: false
    user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
    password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
  environment: "{{ proxy_env }}"
  no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
  register: _latest_release
  until: _latest_release.status == 200
  retries: 5
  become: true
  tags: alertmanager
  when: alertmanager_version == "latest"

- name: "set version to {{ _latest_release.json.tag_name[1:] }}"
  set_fact:
    alertmanager_version: "{{ _latest_release.json.tag_name[1:] }}"
  become: true
  tags: alertmanager
  when: alertmanager_version == "latest"

- name: get checksum list from github
  set_fact:
    _checksums: "{{ lookup('url', 'https://github.com/prometheus/alertmanager/releases/download/v' + alertmanager_version + '/sha256sums.txt', wantlist=True) | list }}"
  environment: "{{ proxy_env }}"
  run_once: true
  become: true
  tags: alertmanager
  when: (not __alertmanager_is_installed.stat.exists) or (__alertmanager_current_version_output.stdout_lines[0].split(" ")[2] != alertmanager_version)

- name: "get checksum for architecture"
  set_fact:
    alertmanager_checksum: "{{ item.split(' ')[0] }}"
  with_items:
    - "{{ lookup('url', 'https://github.com/prometheus/alertmanager/releases/download/v' + alertmanager_version + '/sha256sums.txt', wantlist=True) | list }}"
  become: true
  tags: alertmanager
  when:
    - ('alertmanager-' + alertmanager_version + '.linux-' + go_arch + '.tar.gz') in item
    - (not __alertmanager_is_installed.stat.exists) or (__alertmanager_current_version_output.stdout_lines[0].split(" ")[2] != alertmanager_version)

- name: download binary to local folder
  get_url:
    url: "https://github.com/prometheus/alertmanager/releases/download/v{{ alertmanager_version }}/alertmanager-{{ alertmanager_version }}.linux-{{ go_arch }}.tar.gz"
    dest: "/tmp/alertmanager-{{ alertmanager_version }}.linux-{{ go_arch }}.tar.gz"
    checksum: "sha256:{{ alertmanager_checksum }}"
  environment: "{{ proxy_env }}"
  register: _download_archive
  until: _download_archive is succeeded
  retries: 5
  delay: 2
  # run_once: true # <-- this can't be set due to multi-arch support
  delegate_to: localhost
  check_mode: false
  become: true
  tags: alertmanager
  when: (not __alertmanager_is_installed.stat.exists) or (__alertmanager_current_version_output.stdout_lines[0].split(" ")[2] != alertmanager_version)

- name: unpack binaries
  unarchive:
    src: "/tmp/alertmanager-{{ alertmanager_version }}.linux-{{ go_arch }}.tar.gz"
    dest: "/tmp"
    creates: "/tmp/alertmanager-{{ alertmanager_version }}.linux-{{ go_arch }}/alertmanager"
  delegate_to: localhost
  check_mode: false
  become: true
  tags: alertmanager
  when: (not __alertmanager_is_installed.stat.exists) or (__alertmanager_current_version_output.stdout_lines[0].split(" ")[2] != alertmanager_version)

- name: propagate binaries
  copy:
    src: "/tmp/alertmanager-{{ alertmanager_version }}.linux-{{ go_arch }}/{{ item }}"
    dest: "{{ alertmanager_binary_install_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  with_items:
    - alertmanager
    - amtool
  notify: restart alertmanager
  become: true
  tags: alertmanager
  when: (not __alertmanager_is_installed.stat.exists) or (__alertmanager_current_version_output.stdout_lines[0].split(" ")[2] != alertmanager_version)

- name: copy alertmanager config
  template:
    force: true
    src: alertmanager.yml.j2
    dest: "{{ alertmanager_config_dir }}/config.yml"
    owner: "{{ alertmanager_system_user }}"
    group: "{{ alertmanager_system_group }}"
    mode: 0644
    validate: "{{ alertmanager_binary_install_dir }}/amtool --alertmanager.url= check-config %s"
  notify: reload alertmanager
  become: true
  tags:
    - alertmanager
    - alertmanager_config

- name: copy alertmanager template files
  copy:
    src: "{{ item }}"
    dest: "{{ alertmanager_config_dir }}/templates/"
    force: true
    owner: "{{ alertmanager_system_user }}"
    group: "{{ alertmanager_system_group }}"
    mode: 0644
  with_fileglob: "{{ alertmanager_template_files }}"
  notify: reload alertmanager
  become: true
  tags:
    - alertmanager
    - alertmanager_config

- name: create systemd service unit
  template:
    src: alertmanager.service.j2
    dest: /etc/systemd/system/alertmanager.service
    owner: root
    group: root
    mode: 0644
  notify: restart alertmanager
  become: true
  tags: alertmanager

- name: start and enable alertmanager service
  systemd:
    daemon_reload: true
    name: alertmanager
    state: started
    enabled: true
  become: true
  tags: alertmanager
